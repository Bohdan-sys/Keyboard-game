{"version":3,"file":"script.min.js","mappings":";;;;;;;;;AAAA,uHAAgD;;;;;;;;;;ACAhxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,mBAAO,CAAC,uEAAmB;AACxC,aAAa,mBAAO,CAAC,6DAAU;AAC/B,aAAa,mBAAO,CAAC,6DAAU;;AAE/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,IAAI;AAC9B;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA,0BAA0B,IAAI;AAC9B;AACA;AACA;;AAEA;AACA,kCAAkC,qBAAqB;AACvD;;AAEA;;AAEA;AACA;AACA,+BAA+B,IAAI;AACnC;AACA;AACA;AACA;AACA,+BAA+B,IAAI;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;ACxOA,sBAAsB,mBAAO,CAAC,2FAA6B;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,QAAQ,EAAE;AACvE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,+BAA+B,IAAI;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU,IAAI,aAAa,IAAI,yBAAyB,IAAI,cAAc;;AAExF;AACA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","sources":["webpack://vanilla/./node_modules/languagedetect/index.js","webpack://vanilla/./node_modules/languagedetect/lib/ISO639.js","webpack://vanilla/./node_modules/languagedetect/lib/LanguageDetect.js","webpack://vanilla/./node_modules/languagedetect/lib/Parser.js","webpack://vanilla/./src/js/components/addTextForm.ts","webpack://vanilla/./src/js/components/card.ts","webpack://vanilla/./src/js/components/list.ts","webpack://vanilla/./src/js/components/popup.ts","webpack://vanilla/webpack/bootstrap","webpack://vanilla/webpack/runtime/compat get default export","webpack://vanilla/webpack/runtime/define property getters","webpack://vanilla/webpack/runtime/hasOwnProperty shorthand","webpack://vanilla/webpack/runtime/make namespace object","webpack://vanilla/./src/js/script.ts"],"sourcesContent":["module.exports = require('./lib/LanguageDetect');","var Languages = module.exports = {\n  getCode2:function (lang) {\n    return Languages.nameToCode2[String(lang).toLowerCase()] || null;\n  },\n\n  getCode3: function(lang) {\n    return Languages.nameToCode3[String(lang).toLowerCase()] || null;\n  },\n\n  getName2: function(code) {\n    return Languages.code2ToName[String(code).toLowerCase()] || null;\n  },\n\n  getName3: function(code) {\n    return Languages.code3ToName[String(code).toLowerCase()] || null;\n  },\n\n  nameToCode2:{\n    'albanian':'sq',\n    'arabic':'ar',\n    'azeri':'az',\n    'bengali':'bn',\n    'bulgarian':'bg',\n    'cebuano':null,\n    'croatian':'hr',\n    'czech':'cs',\n    'danish':'da',\n    'dutch':'nl',\n    'english':'en',\n    'estonian':'et',\n    'farsi':'fa',\n    'finnish':'fi',\n    'french':'fr',\n    'german':'de',\n    'hausa':'ha',\n    'hawaiian':null,\n    'hindi':'hi',\n    'hungarian':'hu',\n    'icelandic':'is',\n    'indonesian':'id',\n    'italian':'it',\n    'kazakh':'kk',\n    'kyrgyz':'ky',\n    'latin':'la',\n    'latvian':'lv',\n    'lithuanian':'lt',\n    'macedonian':'mk',\n    'mongolian':'mn',\n    'nepali':'ne',\n    'norwegian':'no',\n    'pashto':'ps',\n    'pidgin':null,\n    'polish':'pl',\n    'portuguese':'pt',\n    'romanian':'ro',\n    'russian':'ru',\n    'serbian':'sr',\n    'slovak':'sk',\n    'slovene':'sl',\n    'somali':'so',\n    'spanish':'es',\n    'swahili':'sw',\n    'swedish':'sv',\n    'tagalog':'tl',\n    'turkish':'tr',\n    'ukrainian':'uk',\n    'urdu':'ur',\n    'uzbek':'uz',\n    'vietnamese':'vi',\n    'welsh':'cy'\n  },\n\n  nameToCode3:{\n    'albanian':'sqi',\n    'arabic':'ara',\n    'azeri':'aze',\n    'bengali':'ben',\n    'bulgarian':'bul',\n    'cebuano':'ceb',\n    'croatian':'hrv',\n    'czech':'ces',\n    'danish':'dan',\n    'dutch':'nld',\n    'english':'eng',\n    'estonian':'est',\n    'farsi':'fas',\n    'finnish':'fin',\n    'french':'fra',\n    'german':'deu',\n    'hausa':'hau',\n    'hawaiian':'haw',\n    'hindi':'hin',\n    'hungarian':'hun',\n    'icelandic':'isl',\n    'indonesian':'ind',\n    'italian':'ita',\n    'kazakh':'kaz',\n    'kyrgyz':'kir',\n    'latin':'lat',\n    'latvian':'lav',\n    'lithuanian':'lit',\n    'macedonian':'mkd',\n    'mongolian':'mon',\n    'nepali':'nep',\n    'norwegian':'nor',\n    'pashto':'pus',\n    'pidgin':'crp',\n    'polish':'pol',\n    'portuguese':'por',\n    'romanian':'ron',\n    'russian':'rus',\n    'serbian':'srp',\n    'slovak':'slk',\n    'slovene':'slv',\n    'somali':'som',\n    'spanish':'spa',\n    'swahili':'swa',\n    'swedish':'swe',\n    'tagalog':'tgl',\n    'turkish':'tur',\n    'ukrainian':'ukr',\n    'urdu':'urd',\n    'uzbek':'uzb',\n    'vietnamese':'vie',\n    'welsh':'cym'\n  },\n  code2ToName:{\n    'ar':'arabic',\n    'az':'azeri',\n    'bg':'bulgarian',\n    'bn':'bengali',\n    'cs':'czech',\n    'cy':'welsh',\n    'da':'danish',\n    'de':'german',\n    'en':'english',\n    'es':'spanish',\n    'et':'estonian',\n    'fa':'farsi',\n    'fi':'finnish',\n    'fr':'french',\n    'ha':'hausa',\n    'hi':'hindi',\n    'hr':'croatian',\n    'hu':'hungarian',\n    'id':'indonesian',\n    'is':'icelandic',\n    'it':'italian',\n    'kk':'kazakh',\n    'ky':'kyrgyz',\n    'la':'latin',\n    'lt':'lithuanian',\n    'lv':'latvian',\n    'mk':'macedonian',\n    'mn':'mongolian',\n    'ne':'nepali',\n    'nl':'dutch',\n    'no':'norwegian',\n    'pl':'polish',\n    'ps':'pashto',\n    'pt':'portuguese',\n    'ro':'romanian',\n    'ru':'russian',\n    'sk':'slovak',\n    'sl':'slovene',\n    'so':'somali',\n    'sq':'albanian',\n    'sr':'serbian',\n    'sv':'swedish',\n    'sw':'swahili',\n    'tl':'tagalog',\n    'tr':'turkish',\n    'uk':'ukrainian',\n    'ur':'urdu',\n    'uz':'uzbek',\n    'vi':'vietnamese'\n  },\n\n  code3ToName:{\n    'ara':'arabic',\n    'aze':'azeri',\n    'ben':'bengali',\n    'bul':'bulgarian',\n    'ceb':'cebuano',\n    'ces':'czech',\n    'crp':'pidgin',\n    'cym':'welsh',\n    'dan':'danish',\n    'deu':'german',\n    'eng':'english',\n    'est':'estonian',\n    'fas':'farsi',\n    'fin':'finnish',\n    'fra':'french',\n    'hau':'hausa',\n    'haw':'hawaiian',\n    'hin':'hindi',\n    'hrv':'croatian',\n    'hun':'hungarian',\n    'ind':'indonesian',\n    'isl':'icelandic',\n    'ita':'italian',\n    'kaz':'kazakh',\n    'kir':'kyrgyz',\n    'lat':'latin',\n    'lav':'latvian',\n    'lit':'lithuanian',\n    'mkd':'macedonian',\n    'mon':'mongolian',\n    'nep':'nepali',\n    'nld':'dutch',\n    'nor':'norwegian',\n    'pol':'polish',\n    'por':'portuguese',\n    'pus':'pashto',\n    'rom':'romanian',\n    'rus':'russian',\n    'slk':'slovak',\n    'slv':'slovene',\n    'som':'somali',\n    'spa':'spanish',\n    'sqi':'albanian',\n    'srp':'serbian',\n    'swa':'swahili',\n    'swe':'swedish',\n    'tgl':'tagalog',\n    'tur':'turkish',\n    'ukr':'ukrainian',\n    'urd':'urdu',\n    'uzb':'uzbek',\n    'vie':'vietnamese'\n  }\n};","/**\n *\n * Detects the language of a given piece of text.\n *\n * Attempts to detect the language of a sample of text by correlating ranked\n * 3-gram frequencies to a table of 3-gram frequencies of known languages.\n *\n * Implements a version of a technique originally proposed by Cavnar & Trenkle\n * (1994): \"N-Gram-Based Text Categorization\"\n *\n * Largely inspired from the PHP Pear Package Text_LanguageDetect by Nicholas Pisarro\n * Licence: http://www.debian.org/misc/bsd.license BSD\n *\n * @author Francois-Guillaume Ribreau - @FGRibreau\n * @author Ruslan Zavackiy - @Chaoser\n *\n * @see https://github.com/FGRibreau/node-language-detect\n *\n * Installation:\n *  npm install LanguageDetect\n *\n * @example\n * <code>\n * var LanguageDetect = require(\"../LanguageDetect\");\n * var d = new LanguageDetect().detect('This is a test');\n * // d[0] == 'english'\n * // d[1] == 0.5969230769230769\n * // Good score are over 0.3\n * </code>\n */\n\nvar dbLang = require('../data/lang.json')\n  , Parser = require('./Parser')\n  , ISO639 = require('./ISO639');\n\nvar LanguageDetect = module.exports = function (languageType) {\n\n  /**\n   * The trigram data for comparison\n   *\n   * Will be loaded on start from $this->_db_filename\n   *\n   * May be set to a PEAR_Error object if there is an error during its\n   * initialization\n   *\n   * @var      array\n   * @access   private\n   */\n  this.langDb = {};\n\n  /**\n   * The size of the trigram data arrays\n   *\n   * @var     int\n   * @access  private\n   */\n  this.threshold = 300;\n\n  this.useUnicodeNarrowing = true;\n\n  /**\n   * Constructor\n   *\n   * Load the language database.\n   *\n   */\n  this.langDb = dbLang['trigram'];\n  this.unicodeMap = dbLang['trigram-unicodemap'];\n\n  this.languageType = languageType || null;\n};\n\nLanguageDetect.prototype = {\n\n  /**\n   * Returns the number of languages that this object can detect\n   *\n   * @access public\n   * @return int the number of languages\n   */\n  getLanguageCount:function () {\n    return this.getLanguages().length;\n  },\n\n  setLanguageType:function (type) {\n    return this.languageType = type;\n  },\n\n  /**\n   * Returns the list of detectable languages\n   *\n   * @access public\n   * @return object the names of the languages known to this object\n   */\n  getLanguages:function () {\n    return Object.keys(this.langDb);\n  },\n\n  /**\n   * Calculates a linear rank-order distance statistic between two sets of\n   * ranked trigrams\n   *\n   * Sums the differences in rank for each trigram. If the trigram does not\n   * appear in both, consider it a difference of $this->_threshold.\n   *\n   * This distance measure was proposed by Cavnar & Trenkle (1994). Despite\n   * its simplicity it has been shown to be highly accurate for language\n   * identification tasks.\n   *\n   * @access  private\n   * @param   arr1  the reference set of trigram ranks\n   * @param   arr2  the target set of trigram ranks\n   * @return  int   the sum of the differences between the ranks of\n   *                the two trigram sets\n   */\n  distance:function (arr1, arr2) {\n    var me = this\n      , sumdist = 0\n      , keys = Object.keys(arr2)\n      , i;\n\n    for (i = keys.length; i--;) {\n      sumdist += arr1[keys[i]] ? Math.abs(arr2[keys[i]] - arr1[keys[i]]) : me.threshold;\n    }\n\n    return sumdist;\n  },\n\n  /**\n   * Normalizes the score returned by _distance()\n   *\n   * Different if perl compatible or not\n   *\n   * @access  private\n   * @param   score       the score from _distance()\n   * @param   baseCount   the number of trigrams being considered\n   * @return  number      the normalized score\n   *\n   * @see     distance()\n   */\n  normalizeScore:function (score, baseCount) {\n    return 1 - (score / (baseCount || this.threshold) / this.threshold);\n  },\n\n  /**\n   * Detects the closeness of a sample of text to the known languages\n   *\n   * Calculates the statistical difference between the text and\n   * the trigrams for each language, normalizes the score then\n   * returns results for all languages in sorted order\n   *\n   * If perl compatible, the score is 300-0, 0 being most similar.\n   * Otherwise, it's 0-1 with 1 being most similar.\n   *\n   * The $sample text should be at least a few sentences in length;\n   * should be ascii-7 or utf8 encoded, if another and the mbstring extension\n   * is present it will try to detect and convert. However, experience has\n   * shown that mb_detect_encoding() *does not work very well* with at least\n   * some types of encoding.\n   *\n   * @access  public\n   * @param   sample  a sample of text to compare.\n   * @param   limit  if specified, return an array of the most likely\n   *                  $limit languages and their scores.\n   * @return  Array   sorted array of language scores, blank array if no\n   *                  useable text was found, or PEAR_Error if error\n   *                  with the object setup\n   *\n   * @see     distance()\n   */\n  detect:function (sample, limit) {\n    var me = this\n      , scores = [];\n\n    limit = +limit || 0;\n\n    if (sample == '' || String(sample).length < 3) return [];\n\n    var sampleObj = new Parser(sample);\n    sampleObj.setPadStart(true);\n    sampleObj.analyze();\n\n    var trigramFreqs = sampleObj.getTrigramRanks()\n      , trigramCount = Object.keys(trigramFreqs).length;\n\n    if (trigramCount == 0) return [];\n\n    var keys = [], i, lang;\n\n    if (this.useUnicodeNarrowing) {\n      var blocks = sampleObj.getUnicodeBlocks()\n        , languages = Object.keys(blocks)\n        , keysLength = languages.length;\n\n      for (i = keysLength; i--;) {\n        if (this.unicodeMap[languages[i]]) {\n          for (lang in this.unicodeMap[languages[i]]) {\n            if (!~keys.indexOf(lang)) keys.push(lang);\n          }\n        }\n      }\n    } else {\n      keys = me.getLanguages();\n    }\n\n    for (i = keys.length; i--;) {\n      var score = me.normalizeScore(me.distance(me.langDb[keys[i]], trigramFreqs), trigramCount);\n      if (score) scores.push([keys[i], score]);\n    }\n\n    // Sort the array\n    scores.sort(function (a, b) { return b[1] - a[1]; });\n    var scoresLength = scores.length;\n\n    if (!scoresLength) return [];\n\n    switch (me.languageType) {\n      case 'iso2':\n        for (i = scoresLength; i--;) {\n          scores[i][0] = ISO639.getCode2(scores[i][0]);\n        }\n        break;\n      case 'iso3':\n        for (i = scoresLength; i--;) {\n          scores[i][0] = ISO639.getCode3(scores[i][0]);\n        }\n        break;\n    }\n\n    // limit the number of returned scores\n    return limit > 0 ? scores.slice(0, limit) : scores;\n  }\n};\n","var dbUnicodeBlocks = require('../data/unicode_blocks.json');\n\n/**\n * This class represents a text sample to be parsed.\n *\n * Largely inspired from the PHP Pear Package Text_LanguageDetect by Nicholas Pisarro\n * Licence: http://www.debian.org/misc/bsd.license BSD\n *\n * @author Francois-Guillaume Ribreau - @FGRibreau\n * @author Ruslan Zavackiy - @Chaoser\n *\n * @see https://github.com/FGRibreau/node-language-detect\n */\nvar Parser = module.exports = function (string) {\n  /**\n   * The size of the trigram data arrays\n   *\n   * @access   private\n   * @var      int\n   */\n  this.threshold = 300;\n\n  /**\n   * stores the trigram ranks of the sample\n   *\n   * @access  private\n   * @var     array\n   */\n  this.trigramRanks = {};\n\n  /**\n   * Whether the parser should compile trigrams\n   *\n   * @access  private\n   * @var     bool\n   */\n  this.compileTrigram = true;\n\n  this.compileUnicode = true;\n  this.unicodeSkipAscii = true;\n  this.unicodeBlocks = {};\n\n  /**\n   * Whether the trigram parser should pad the beginning of the string\n   *\n   * @access  private\n   * @var     bool\n   */\n  this.trigramPadStart = false;\n\n  this.trigram = {};\n\n  /**\n   * the piece of text being parsed\n   *\n   * @access  private\n   * @var     string\n   */\n\n  /**\n   * Constructor\n   *\n   * @access  private\n   * @param   string  string to be parsed\n   */\n  this.string = string ? string.replace(/[~!@#$%^&*()_|+\\-=?;:\",.<>\\{\\}\\[\\]\\\\\\/]/g, ' ') : '';\n};\n\nParser.prototype = {\n  /**\n   * turn on/off padding the beginning of the sample string\n   *\n   * @access  public\n   * @param   bool   true for on, false for off\n   */\n  setPadStart: function (bool) {\n    this.trigramPadStart = bool || true;\n  },\n\n  /**\n   * Returns the trigram ranks for the text sample\n   *\n   * @access  public\n   * @return  array   trigram ranks in the text sample\n   */\n  getTrigramRanks: function () {\n    return this.trigramRanks;\n  },\n\n  getBlockCount: function () {\n    return dbUnicodeBlocks.length;\n  },\n\n  getUnicodeBlocks: function () {\n    return this.unicodeBlocks;\n  },\n\n  /**\n   * Executes the parsing operation\n   *\n   * Be sure to call the set*() functions to set options and the\n   * prepare*() functions first to tell it what kind of data to compute\n   *\n   * Afterwards the get*() functions can be used to access the compiled\n   * information.\n   *\n   * @access public\n   */\n  analyze: function () {\n    var len = this.string.length\n      , byteCounter = 0\n      , a = ' ', b = ' '\n      , dropone, c;\n\n    if (this.compileUnicode) {\n      var blocksCount = dbUnicodeBlocks.length;\n    }\n\n    // trigram startup\n    if (this.compileTrigram) {\n      // initialize them as blank so the parser will skip the first two\n      // (since it skips trigrams with more than  2 contiguous spaces)\n      a = ' ';\n      b = ' ';\n\n      // kludge\n      // if it finds a valid trigram to start and the start pad option is\n      // off, then set a variable that will be used to reduce this\n      // trigram after parsing has finished\n      if (!this.trigramPadStart) {\n        a = this.string.charAt(byteCounter++).toLowerCase();\n\n        if (a != ' ') {\n          b = this.string.charAt(byteCounter).toLowerCase();\n          dropone = ' ' + a + b;\n        }\n\n        byteCounter = 0;\n        a = ' ';\n        b = ' ';\n      }\n    }\n\n    var skippedCount = 0;\n    var unicodeChars = {};\n\n    while (byteCounter < len) {\n      c = this.string.charAt(byteCounter++).toLowerCase();\n\n      // language trigram detection\n      if (this.compileTrigram) {\n        if (!(b == ' ' && (a == ' ' || c == ' '))) {\n          var abc = a + b + c;\n          this.trigram[abc] = this.trigram[abc] ? this.trigram[abc] += 1 : 1;\n        }\n\n        a = b;\n        b = c;\n      }\n\n      if (this.compileUnicode) {\n        var charCode = c.charCodeAt(0);\n\n        if (this.unicodeSkipAscii\n          && c.match(/[a-z ]/i)\n          && (charCode < 65 || charCode > 122 || (charCode > 90 && charCode < 97))\n          && c != \"'\") {\n\n          skippedCount++;\n          continue;\n        }\n\n        unicodeChars[c] = unicodeChars[c] ? unicodeChars[c] += 1 : 1;\n      }\n    }\n\n    this.unicodeBlocks = {};\n\n    if (this.compileUnicode) {\n      var keys = Object.keys(unicodeChars)\n        , keysLength = keys.length;\n\n      for (var i = keysLength; i--;) {\n        var unicode = keys[i].charCodeAt(0)\n          , count = unicodeChars[keys[i]]\n          , search = this.unicodeBlockName(unicode, blocksCount)\n          , blockName = search != -1 ? search[2] : '[Malformatted]';\n\n        this.unicodeBlocks[blockName] = this.unicodeBlocks[blockName] ? this.unicodeBlocks[blockName] += count : count;\n      }\n    }\n\n    // trigram cleanup\n    if (this.compileTrigram) {\n      // pad the end\n      if (b != ' ') {\n        var ab = a + b + ' ';\n        this.trigram[ab] = this.trigram[ab] ? this.trigram[ab] += 1 : 1;\n      }\n\n      // perl compatibility; Language::Guess does not pad the beginning\n      // kludge\n      if (typeof dropone != 'undefined' && this.trigram[dropone] == 1) {\n        delete this.trigram[dropone];\n      }\n\n      if (this.trigram && Object.keys(this.trigram).length > 0) {\n        this.trigramRanks = this.arrRank(this.trigram);\n      } else {\n        this.trigramRanks = {};\n      }\n    }\n  },\n\n  /**\n   * Sorts an array by value breaking ties alphabetically\n   *\n   * @access private\n   * @param arr the array to sort\n   */\n  bubleSort: function (arr) {\n    // should do the same as this perl statement:\n    // sort { $trigrams{$b} == $trigrams{$a} ?  $a cmp $b : $trigrams{$b} <=> $trigrams{$a} }\n\n    // needs to sort by both key and value at once\n    // using the key to break ties for the value\n\n    // converts array into an array of arrays of each key and value\n    // may be a better way of doing this\n    var combined = [];\n\n    for (var key in arr) {\n      combined.push([key, arr[key]]);\n    }\n\n    combined = combined.sort(this.sortFunc);\n\n    var replacement = {};\n\n    var length = combined.length;\n\n    for (var i = 0; i < length; i++) {\n      replacement[combined[i][0]] = combined[i][1];\n    }\n\n    return replacement;\n  },\n\n  /**\n   * Converts a set of trigrams from frequencies to ranks\n   *\n   * Thresholds (cuts off) the list at $this->_threshold\n   *\n   * @access  protected\n   * @param   arr     array of trgram\n   * @return  object  ranks of trigrams\n   */\n  arrRank: function (arr) {\n\n    // sorts alphabetically first as a standard way of breaking rank ties\n    arr = this.bubleSort(arr);\n\n    var rank = {}, i = 0;\n\n    for (var key in arr) {\n      rank[key] = i++;\n\n      // cut off at a standard threshold\n      if (i >= this.threshold) {\n        break;\n      }\n    }\n\n    return rank;\n  },\n\n  /**\n   * Sort function used by bubble sort\n   *\n   * Callback function for usort().\n   *\n   * @access   private\n   * @param    a    first param passed by usort()\n   * @param    b    second param passed by usort()\n   * @return   int  1 if $a is greater, -1 if not\n   *\n   * @see      bubleSort()\n   */\n  sortFunc: function (a, b) {\n    // each is actually a key/value pair, so that it can compare using both\n    var aKey = a[0]\n      , aValue = a[1]\n      , bKey = b[0]\n      , bValue = b[1];\n\n    // if the values are the same, break ties using the key\n    if (aValue == bValue) {\n      return aKey.localeCompare(bKey);\n    } else {\n      return aValue > bValue ? -1 : 1;\n    }\n  },\n\n  unicodeBlockName: function (unicode, blockCount) {\n    if (unicode <= dbUnicodeBlocks[0][1]) {\n      return dbUnicodeBlocks[0];\n    }\n\n    var high = blockCount ? blockCount - 1 : dbUnicodeBlocks.length\n      , low = 1\n      , mid;\n\n    while (low <= high) {\n      mid = Math.floor((low + high) / 2);\n\n      if (unicode < dbUnicodeBlocks[mid][0]) {\n        high = mid - 1;\n      } else if (unicode > dbUnicodeBlocks[mid][1]) {\n        low = mid + 1;\n      } else {\n        return dbUnicodeBlocks[mid];\n      }\n    }\n\n    return -1;\n  }\n};","import { List } from \"./list\";\nimport { Popup } from \"./popup\";\n\nexport class AddTextForm {\n    private element: HTMLElement;\n    private input: HTMLTextAreaElement;\n    private popUp: Popup;\n    private list: List;\n\n    constructor(element: HTMLElement) {\n        this.element = element;\n        this.input;\n        this.popUp;\n        this.list;\n\n        this.init();\n    }\n\n    private init() : void {\n        if (this.element) {\n            this.input = this.element.querySelector('textarea');\n            this.popUp = new Popup(document.querySelector('.js-popup'));\n            this.list = new List(document.querySelector('.js-list'));\n            this.createEvents();\n        }    \n    }\n\n    private createEvents(): void {\n        this.element.addEventListener('submit', e => {\n            e.preventDefault();\n            this.submitForm();\n        });\n    }\n\n    public submitForm(): void {\n        if (this.input.value) {\n            const data = JSON.parse(localStorage.getItem('texter')) || [];\n\n            const newData = {\n                \"id\": Date.now(),\n                \"text\": `${this.input.value}`,\n                \"selected\": false,\n                \"randomize\": false\n            }\n  \n            localStorage.setItem('texter', JSON.stringify([...data, newData]));\n            this.popUp?.togglePopup();\n            this.list?.createListItem(newData);\n            this.input.value = '';\n        }\n    }\n}","import LanguageDetect from 'languagedetect';\n\nexport class Card {\n    private element: HTMLElement;\n    private card: HTMLElement;\n    private text: HTMLElement;\n    private lang: HTMLElement;\n    private symbols: HTMLElement;\n    private removeBtn: HTMLElement;\n    private list: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        this.element = element;\n        this.card;\n        this.text;\n        this.lang;\n        this.symbols;\n        this.removeBtn;\n        this.list;\n     \n\n        this.init();\n    }\n\n    private init() : void {\n        if (this.element) {\n            this.card = this.element.querySelector('.js-card');\n            this.text = this.element.querySelector('.js-card-text');\n            this.lang = this.element.querySelector('.js-card-lang');\n            this.symbols = this.element.querySelector('.js-card-symbols');\n            this.removeBtn = this.element.querySelector('.js-card-remove');\n            this.list = this.element.parentElement;\n    \n            this.createEvents();\n            this.getInfo();\n        }      \n    }\n\n    public createEvents(): void {\n        this.removeBtn.addEventListener('click', e => this.removeCard());\n    }\n\n    private removeCard(): void {\n        this.element.remove();\n    }\n \n    public getInfo(): void {\n        const lngDetector = new LanguageDetect();\n        const [ detectedLang ] = lngDetector.detect(this.text.textContent, 1);\n        this.symbols.textContent = String(this.text.textContent.length);\n        this.lang.textContent = detectedLang[0];\n    }\n}","import { AddTextForm } from './addTextForm';\nimport { Card } from './card';\n\nexport class List {\n    private element: HTMLElement;\n    private data;\n    private listItem: HTMLElement[];\n\n    constructor(element: HTMLElement) {\n        this.element = element;\n        this.data = JSON.parse(localStorage.getItem('texter')) || [];\n        this.listItem;\n        this.init();\n    }\n\n    private init() : void {\n        if (this.element) {\n            this.createList();\n            this.getCardInfo();\n        }        \n    }\n\n    public createListItem(data: any): void {\n        const item = `\n            <li class=\"list__item js-list-item\">\n                <div class=\"card js-card\" data-uid=\"${data.id}\">\n                    <div class=\"card__info\">\n                        <span class=\"card__lang js-card-lang\">\n                            en\n                        </span>\n                        <span class=\"card__symbols js-card-symbols\">\n                            3\n                        </span>\n                    </div>\n                    <p class=\"card__text js-card-text\">${data.text}</p>\n                    <div class=\"card__actions\">\n                        <a href=\"#\" class=\"button card__test\">GO!</a>\n                        <button class=\"button card__remove js-card-remove\">REMOVE!</button>\n                    </div>\n                </div>\n            </li>\n        `;\n        this.element.insertAdjacentHTML('beforeend', item)\n    }\n\n    private createList(): void {\n        this.data?.forEach((element: any) => {\n            this.createListItem(element);\n        });\n    }\n\n    private getCardInfo(): void {\n        this.listItem?.forEach(item => new Card(item));\n    }\n}   ","export class Popup {\n    private element: HTMLElement;\n    private openPopupBtn: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        this.element = element;\n        this.openPopupBtn;\n\n        this.init();\n    }\n\n    private init() : void {\n        if (this.element) {\n            this.openPopupBtn = document.querySelector('.js-open-popup');\n            this.createEvents();\n        }    \n    }\n\n    private createEvents(): void {\n        this.element.addEventListener('click', ({ target }) => {\n            if (target === this.element) {\n                this.togglePopup();\n            }\n        });\n\n        this.openPopupBtn?.addEventListener('click', () => this.togglePopup());\n    }\n\n    public togglePopup(): void {\n        this.element.classList.toggle('is-active');\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { AddTextForm } from './components/addTextForm';\nimport { List } from './components/list';\nimport { Popup } from './components/popup';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // sayHello('Bohdan');\n    // const popUp = new Popup(document.querySelector('.js-popup'));\n    // document.querySelector('.js-open-popup').addEventListener('click', () => {\n    //     popUp.togglePopup();\n    // })\n    new AddTextForm(document.querySelector('.js-add-text-form'));\n});"],"names":[],"sourceRoot":""}