/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/components/wordBar.ts":
/*!**************************************!*\
  !*** ./src/js/components/wordBar.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WordBar: () => (/* binding */ WordBar)
/* harmony export */ });
/* harmony import */ var _utils_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/db */ "./src/js/utils/db.ts");

class WordBar {
    element;
    textWrapperElement;
    textElement;
    inputElement;
    storage;
    data;
    formattedArr;
    constructor(element) {
        this.element = element;
        this.textWrapperElement;
        this.textElement;
        this.inputElement;
        this.storage = JSON.parse(localStorage.getItem('selectedAricle')) || [];
        this.data;
        this.formattedArr;
        this.init();
    }
    init() {
        if (this.element) {
            this.textWrapperElement = this.element.querySelector('.js-word-bar-text-wrapper');
            this.textElement = this.element.querySelector('.js-word-bar-text');
            this.inputElement = this.element.querySelector('.js-word-bar-input');
            this.getData().then(() => {
                this.createEvents();
                this.shuffleData();
            });
        }
    }
    async getData() {
        const { id } = this.storage;
        if (id) {
            this.data = await (0,_utils_db__WEBPACK_IMPORTED_MODULE_0__.getFromDb)(id);
        }
    }
    shuffleData() {
        const { randomize } = this.storage;
        if (this.data) {
            const { text } = this.data;
            const clearedText = text.replace(/\r?\n/g, '');
            if (randomize) {
                const randomArr = clearedText
                    .split(' ')
                    .sort(() => Math.random() - 0.5)
                    .join(' ');
                this.textElement.innerText = randomArr;
            }
            else {
                this.textElement.innerText = clearedText;
            }
        }
    }
    createEvents() {
        this.inputElement?.addEventListener('input', () => this.checkWord(this.inputElement.value));
    }
    checkWord(str) {
        const { text } = this.data;
        this.textElement.innerHTML = text
            .split('')
            .map((element, index) => {
            if (index < str.length) {
                if (element === str[index]) {
                    return `<span class="is-correct">${element}</span>`;
                }
                else {
                    return `<span class="is-error">${element}</span>`;
                }
            }
            else {
                return element;
            }
        })
            .join('');
        this.calculateWordSize();
    }
    calculateWordSize() {
        const character = [...this.element.querySelectorAll('.js-word-bar-text span')];
        const wordWidth = character.reduce((acc, cur) => acc + cur.offsetWidth, 0);
        this.textElement.style.left = `-${wordWidth}px`;
    }
}


/***/ }),

/***/ "./src/js/utils/db.ts":
/*!****************************!*\
  !*** ./src/js/utils/db.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addToDb: () => (/* binding */ addToDb),
/* harmony export */   deleteFromDb: () => (/* binding */ deleteFromDb),
/* harmony export */   getFromDb: () => (/* binding */ getFromDb)
/* harmony export */ });
async function getFromDb(id) {
    try {
        const res = await fetch(`http://localhost:3004/texts/${id ? id : ""}`, { method: 'GET' });
        return res.json();
    }
    catch (error) {
        console.error('Some problems with JSON file', error);
    }
}
async function addToDb(data) {
    try {
        await fetch('http://localhost:3004/texts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            mode: 'cors',
            body: JSON.stringify(data)
        });
    }
    catch (error) {
        console.error('Some problems with adding JSON file', error);
    }
}
async function deleteFromDb(id) {
    try {
        await fetch(`http://localhost:3004/texts/${id}`, { method: 'DELETE' });
    }
    catch (error) {
        console.error('Some problems with removing from DB', error);
    }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!************************!*\
  !*** ./src/js/home.ts ***!
  \************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_wordBar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/wordBar */ "./src/js/components/wordBar.ts");

document.addEventListener('DOMContentLoaded', () => {
    new _components_wordBar__WEBPACK_IMPORTED_MODULE_0__.WordBar(document.querySelector('.js-word-bar'));
});

})();

/******/ })()
;
//# sourceMappingURL=home.min.js.map